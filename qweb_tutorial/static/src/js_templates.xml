<?xml version="1.0" encoding="utf-8"?>
<!-- for JS: QWEB temapltes can be created using templates as the 
    root element,
    - like qweb python template this file is not added into data but
    under assets property
    - this template is not added into database and can be loaded only when
    require using `t-call-assets` directive 
        <t t-call-assets="web.assets_frontend" t-js="false" > 
    - we can find assets by inspecting -> Network -> JS, in this we can serach our module
    as well as the template that we have created
    - this template can then interpret JS expression or any `prop` added by
    owl component or widgets
-->


<templates xml:space="preserve">
    <!-- Create New publicWidget add into registry: jsTemplate  -->
    <t t-name="qweb_turorials.jsTemplate">
        <div class="alert alert-primary">
            <h3>Rendered from public widget.</h3>
        </div>
    </t>

    <!-- Create New publicWidget add into registry: templateWithVariables  -->
    <t t-name="qweb_turorials.templateWithVariables">
        <div class="">
            <ul>
                <!-- same as pyhton template for js we can directly use t-out directive
                    and use the data/values that has been passed inside `renderToElement` method -->
                <li>String: <spqn t-out="string"/></li>

                <!-- create any JS object and set with t-set directive -->
                <t t-set="some_date" t-value="new Date()"/>
                <li>JS Objcet: <span t-out="some_date.toLocaleString()"/></li>
                
                <li>Array:
                    <ul>
                        <!-- we can iterate array same as python but for JS we need to use t-key directive as well -->
                        <li t-foreach="array" t-as="i" t-key="i">
                            <span t-out="i"/>
                        </li>
                    </ul>
                </li>
                <li>Models:
                    <ul>
                        <li t-foreach="model" t-as="el" t-key="el.id">
                            <span t-out="el.name"/> - <span t-out="el.partner_id[1]"/>
                            <!-- TODO: check how can we get partner phone here -->
                            <!-- <t t-log="el"/> -->
                        </li>
                    </ul>
                </li>
                <li>Attributes:
                    <a t-attf-href="mailto:{{ email }}"><span t-out="email"/></a>
                </li>
            </ul>
        </div>
    </t>

    <!-- JS template Inheritance -->
    <t t-name="qweb_turorials.mainTemplate">
        <div class="alert alert-primary">
            <h3>This is main template.</h3>
        </div>
    </t>

    <!-- default t-inherit-mode is primary if we don't defained it,
        extension will change the main template -->
    <t t-inherit="qweb_turorials.mainTemplate" t-inherit-mode="extension">
        <xpath expr="div" position="inside">
            <button class="btn btn-info">Submit</button>
        </xpath>
    </t>

    <!-- t-inherit_mode="primary" will not affect the main template -->
    <t t-name="qweb_turorials.childTemplatePrimary" t-inherit="qweb_turorials.mainTemplate">
        <xpath expr="div" position="inside">
            <button class="btn btn-info ms-2">Close</button>
        </xpath>
    </t>

    <!-- sub template -->
    <t t-name="qweb_turorials.subTemplate">
        <div id="wrapper">
            <header>
                <div class="alert alert-info">Header</div>
            </header>
            <main>
                <t t-call="qweb_turorials.mainTemplate"/>
            </main>
            <footer>
                <div class="alert alert-info">Footer</div>
            </footer>
        </div>
    </t>

    <!-- template with events -->
    <t t-name="qweb_turorials.templateWithEvents">
        <div class="alert alert-primary">
            <h3>Template With Events</h3>
            <p>Counter <span id="counter">0</span></p>
            <button class="btn btn-info">Increase Counter</button>
        </div>
    </t>
</templates>
